package ru.iuturakulov.mybudget.ui.transactions

import android.Manifest
import android.app.Activity
import android.app.AlertDialog
import android.content.Intent
import android.content.pm.PackageManager
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.graphics.Canvas
import android.graphics.ColorMatrix
import android.graphics.ColorMatrixColorFilter
import android.graphics.Paint
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.os.Parcelable
import android.provider.MediaStore
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.ArrayAdapter
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import androidx.core.content.ContextCompat
import androidx.fragment.app.DialogFragment
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.google.android.material.bottomsheet.BottomSheetDialog
import com.google.mlkit.vision.common.InputImage
import com.google.mlkit.vision.text.TextRecognition
import com.google.mlkit.vision.text.latin.TextRecognizerOptions
import dagger.hilt.android.AndroidEntryPoint
import ru.iuturakulov.mybudget.data.local.entities.TemporaryTransaction
import ru.iuturakulov.mybudget.databinding.DialogAddTransactionBinding
import ru.iuturakulov.mybudget.ui.projects.details.EmojiPickerAdapter

@AndroidEntryPoint
class AddTransactionDialogFragment : DialogFragment() {

    private var _binding: DialogAddTransactionBinding? = null
    private val binding get() = _binding!!

    private var args: AddTransactionArgs? = null
    private var onTransactionAdded: ((TemporaryTransaction) -> Unit)? = null

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = DialogAddTransactionBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        args = arguments?.getParcelable(ARG_TRANSACTION)
        setupViews()
    }

    private fun setupViews() {
        args?.let { argument ->
            setupCategorySpinner()
            setupEmojiPicker()

            // –ö–Ω–æ–ø–∫–∞ "–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫"
            binding.btnScanReceipt.setOnClickListener {
                checkAndRequestPermissions()
            }

            // –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
            binding.btnSave.setOnClickListener {
                if (validateInput()) {
                    val temporaryTransaction = TemporaryTransaction(
                        id = "${argument.projectId}-${System.currentTimeMillis()}".hashCode()
                            .toString(),
                        name = binding.etTransactionName.text.toString(),
                        amount = binding.etTransactionAmount.text.toString().toDouble(),
                        category = binding.spinnerCategory.text.toString(),
                        categoryIcon = binding.ivTransactionCategoryIcon.tag?.toString() ?: "",
                        date = System.currentTimeMillis(),
                        projectId = argument.projectId,
                        userId = ""
                    )
                    onTransactionAdded?.invoke(temporaryTransaction)
                    dismiss()
                }
            }

            // –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
            binding.btnCancel.setOnClickListener {
                dismiss()
            }
        }
    }

    private fun setupCategorySpinner() {
        val categories = listOf("–ï–¥–∞", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–ü—Ä–æ—á–µ–µ") // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        val adapter =
            ArrayAdapter(requireContext(), android.R.layout.simple_dropdown_item_1line, categories)
        binding.spinnerCategory.setAdapter(adapter)

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
        binding.spinnerCategory.setOnItemClickListener { _, _, position, _ ->
            val selectedCategory = categories[position]
            val icon = getCategoryIcon(selectedCategory)
            binding.ivTransactionCategoryIcon.text = icon // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–º–æ–¥–∑–∏
            binding.ivTransactionCategoryIcon.tag =
                selectedCategory // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        }
    }

    private fun getCategoryIcon(category: String): String {
        return when (category) {
            "–ï–¥–∞" -> "üçï"
            "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç" -> "üöó"
            "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è" -> "üéâ"
            "–ü—Ä–æ—á–µ–µ" -> "üíº"
            else -> "‚ùì"
        }
    }


    private fun setupEmojiPicker() {
        binding.ivTransactionCategoryIcon.setOnClickListener {
            showEmojiPickerDialog { selectedEmoji ->
                binding.ivTransactionCategoryIcon.text = selectedEmoji // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–º–æ–¥–∑–∏
                binding.ivTransactionCategoryIcon.tag = selectedEmoji
            }
        }
    }

    private fun showEmojiPickerDialog(onEmojiSelected: (String) -> Unit) {
        val emojis = listOf("üòä", "üöó", "üçï", "üéâ", "üíµ", "üìà", "üõí", "‚úàÔ∏è")
        val dialog = BottomSheetDialog(requireContext())
        val dialogView = RecyclerView(requireContext()).apply {
            layoutManager = GridLayoutManager(context, 5) // –°–µ—Ç–∫–∞ 5xN
            adapter = EmojiPickerAdapter(emojis) { emoji ->
                onEmojiSelected(emoji)
                dialog.dismiss()
            }
        }
        dialog.setContentView(dialogView)
        dialog.show()
    }


    private val requestPermissionsLauncher = registerForActivityResult(
        ActivityResultContracts.RequestMultiplePermissions()
    ) { permissions ->
        val allGranted = permissions.values.all { it }
        if (allGranted) {
            showImageSourceDialog()
        } else {
            Toast.makeText(
                requireContext(),
                "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è",
                Toast.LENGTH_SHORT
            ).show()
        }
    }

    private fun requestPermissions() {
        val permissions = mutableListOf(
            Manifest.permission.CAMERA
        )
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.TIRAMISU) {
            permissions.add(Manifest.permission.READ_EXTERNAL_STORAGE)
        } else {
            permissions.add(Manifest.permission.READ_MEDIA_IMAGES)
        }
        requestPermissionsLauncher.launch(permissions.toTypedArray())
    }

    private fun checkAndRequestPermissions() {
        val cameraPermission = ContextCompat.checkSelfPermission(
            requireContext(),
            Manifest.permission.CAMERA
        )
        val storagePermission = if (Build.VERSION.SDK_INT < Build.VERSION_CODES.TIRAMISU) {
            ContextCompat.checkSelfPermission(
                requireContext(),
                Manifest.permission.READ_EXTERNAL_STORAGE
            )
        } else {
            ContextCompat.checkSelfPermission(
                requireContext(),
                Manifest.permission.READ_MEDIA_IMAGES
            )
        }
        if (cameraPermission == PackageManager.PERMISSION_GRANTED &&
            storagePermission == PackageManager.PERMISSION_GRANTED
        ) {
            showImageSourceDialog()
        } else {
            requestPermissions()
        }
    }

    private fun showImageSourceDialog() {
        val options = arrayOf("–ö–∞–º–µ—Ä–∞", "–ì–∞–ª–µ—Ä–µ—è")
        AlertDialog.Builder(requireContext())
            .setTitle("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            .setItems(options) { _, which ->
                when (which) {
                    0 -> openCamera()
                    1 -> openGallery()
                }
            }
            .show()
    }

    private val imagePickerLauncher = registerForActivityResult(
        ActivityResultContracts.GetContent()
    ) { uri ->
        uri?.let {
            val bitmap = getBitmapFromUri(uri)
            bitmap?.let {
                binding.ivReceiptPreview.setImageBitmap(preprocessBitmap(it)) // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø—Ä–µ–≤—å—é
                recognizeTextFromImage(preprocessBitmap(it)) // –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
            }
        }
    }

    private fun openCamera() {
        val intent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)
        startActivityForResult(intent, REQUEST_IMAGE_CAPTURE)
    }

    private fun openGallery() {
        imagePickerLauncher.launch("image/*")
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (requestCode == REQUEST_IMAGE_CAPTURE && resultCode == Activity.RESULT_OK) {
            val imageUri = data?.data
            imageUri?.let { uri ->
                val bitmap = getBitmapFromUri(uri)
                bitmap?.let {
                    binding.ivReceiptPreview.setImageBitmap(it) // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø—Ä–µ–≤—å—é
                    recognizeTextFromImage(preprocessBitmap(it)) // –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
                }
            }
        }
    }

    private fun getBitmapFromUri(uri: Uri): Bitmap? {
        return try {
            val inputStream = requireContext().contentResolver.openInputStream(uri)
            BitmapFactory.decodeStream(inputStream)
        } catch (e: Exception) {
            Toast.makeText(requireContext(), "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", Toast.LENGTH_SHORT)
                .show()
            null
        }
    }

    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    private fun preprocessBitmap(bitmap: Bitmap): Bitmap {
        // –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å (—á/–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
        val matrix = ColorMatrix()
        matrix.setSaturation(0f) // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ 0 (—á–µ—Ä–Ω–æ-–±–µ–ª–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
        val filter = ColorMatrixColorFilter(matrix)
        val paint = Paint().apply { colorFilter = filter }
        val grayscaleBitmap =
            Bitmap.createBitmap(bitmap.width, bitmap.height, Bitmap.Config.ARGB_8888)
        val canvas = Canvas(grayscaleBitmap)
        canvas.drawBitmap(bitmap, 0f, 0f, paint)

        // –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ 1024px –ø–æ –±–æ–ª—å—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        return resizeBitmap(grayscaleBitmap, 1024, 1024)
    }

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    private fun resizeBitmap(bitmap: Bitmap, maxWidth: Int, maxHeight: Int): Bitmap {
        val (width, height) = if (bitmap.width > maxWidth || bitmap.height > maxHeight) {
            val aspectRatio = bitmap.width.toFloat() / bitmap.height
            when {
                aspectRatio > 1 -> maxWidth to (maxWidth / aspectRatio).toInt()
                else -> (maxHeight * aspectRatio).toInt() to maxHeight
            }
        } else {
            bitmap.width to bitmap.height
        }

        return Bitmap.createScaledBitmap(
            bitmap,
            width,
            height,
            true
        ).apply {
            setHasAlpha(false) // –£–±–∏—Ä–∞–µ–º –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª –¥–ª—è –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        }
    }

    private fun recognizeTextFromImage(bitmap: Bitmap) {
        val startTime = System.currentTimeMillis() // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è

        val inputImage = InputImage.fromBitmap(bitmap, 0)
        val multiLanguageOptions = TextRecognizerOptions.Builder().build()

        val recognizer = TextRecognition.getClient(multiLanguageOptions)

        recognizer.process(inputImage)
            .addOnSuccessListener { visionText ->
                val processedText = preprocessText(visionText.text)
                val totalAmount = extractTotalAmount(processedText)

                binding.tvRecognizedAmount.text =
                    "–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Å—É–º–º–∞: ${totalAmount.toDoubleOrNull() ?: 0.0}"
                updateTransactionAmount(totalAmount)

                val duration = System.currentTimeMillis() - startTime
                Toast.makeText(
                    requireContext(),
                    "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${duration}ms",
                    Toast.LENGTH_SHORT
                ).show()
            }
            .addOnFailureListener { e ->
                Toast.makeText(
                    requireContext(),
                    "–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: ${e.localizedMessage}",
                    Toast.LENGTH_SHORT
                ).show()
            }
    }

    private fun preprocessText(text: String): String {
        return text
            .replace(Regex("[¬©¬Æ‚Ñ¢‚Ä¢¬ß]"), "") // –£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            .replace(Regex("\\s+"), " ")   // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–±–µ–ª–æ–≤
            .replace(Regex("(?<=\\d) (?=\\d)"), "") // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤ –≤–Ω—É—Ç—Ä–∏ —á–∏—Å–µ–ª
            .replace(Regex("o", RegexOption.IGNORE_CASE), "0") // –ó–∞–º–µ–Ω–∞ –±—É–∫–≤—ã O –Ω–∞ 0
            .replace(Regex("[`¬¥‚Äò‚Äô‚Ä≤]"), "'") // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞–ø–æ—Å—Ç—Ä–æ—Ñ–æ–≤
    }

    private fun extractTotalAmount(text: String): String {
        val patterns = listOf(
            // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            Regex(
                """(–∏—Ç–æ–≥–æ|–≤—Å–µ–≥–æ|—Å—É–º–º–∞|–∫\s+–æ–ø–ª–∞—Ç–µ|total)\s*[:-]?\s*([\d\s]+[.,]\d{2})\b""",
                RegexOption.IGNORE_CASE
            ),
            Regex("""([‚Ç¨$‚ÇΩ])\s*([\d\s]+[.,]\d{2})\b"""),
            Regex("""\b(\d{1,3}(?:[ ,]\d{3})*[.,]\d{2})(?=\s*(?:—Ä—É–±|—Ä|usd|‚Ç¨|\$))"""),

            // –†–µ–∑–µ—Ä–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            Regex("""\b(\d+[.,]\d{2})\b""")
        )
        patterns.forEach { regex ->
            regex.findAll(text).lastOrNull()?.let {
                return it.groupValues.last()
                    .replace(Regex("""[ ,]"""), "")
                    .replace(',', '.')
            }
        }
        return "0.00"
    }

    private fun updateTransactionAmount(totalAmount: String) {
        val existingAmount = binding.etTransactionAmount.text?.toString()?.toDoubleOrNull() ?: 0.0
        val recognizedAmount = totalAmount.toDoubleOrNull() ?: 0.0
        val updatedAmount = existingAmount + recognizedAmount
        binding.etTransactionAmount.setText(updatedAmount.toString())
    }

    private fun validateInput(): Boolean {
        val name = binding.etTransactionName.text?.toString()
        val amount = binding.etTransactionAmount.text?.toString()

        if (name.isNullOrBlank()) {
            binding.etTransactionName.error = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
            return false
        }

        if (amount.isNullOrBlank() || amount.toDoubleOrNull() == null) {
            binding.etTransactionAmount.error = "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É"
            return false
        }

        return true
    }

    fun setOnTransactionAdded(listener: (TemporaryTransaction) -> Unit) {
        onTransactionAdded = listener
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }

    companion object {
        private const val REQUEST_IMAGE_CAPTURE = 1
        private const val ARG_TRANSACTION = "arg_transaction"

        @kotlinx.parcelize.Parcelize
        data class AddTransactionArgs(
            val projectId: String,
        ) : Parcelable

        fun newInstance(projectId: String): AddTransactionDialogFragment {
            val fragment = AddTransactionDialogFragment()
            val args = Bundle()
            args.putParcelable(ARG_TRANSACTION, AddTransactionArgs(projectId))
            fragment.arguments = args
            return fragment
        }
    }
}

